#%%
plt.clf()
plt.figure(figsize=(6,5))
fig1, (ax4) = plt.subplots(1)
ax4.plot(list_number_nodes_1d,list_number_edges_1d,'orange',label='1D')
ax4.plot(list_number_nodes_2d,list_number_edges_2d,'b',label='2D')
ax4.plot(list_number_nodes_3d,list_number_edges_3d,'r',label='3D')
ax4.set_title("Edges/Nodes Ratio", fontdict={"size": 15})
ax4.set_ylabel("Number of Edges", fontdict={"size": 12})
ax4.set_xlabel("Number of Nodes", fontdict={"size": 12})
ax4.legend()
plt.ylim(0,10000)
plt.xlim(0,660)
plt.savefig('edge to node ratio all 1.8.png',dpi=250)
# plt.savefig('edge to node ratio all 1.8.svg')
#%%
# plt.clf()
# plt.figure(figsize=(6,5))
# fig1, (ax4) = plt.subplots(1)
# plt.plot(list_number_nodes_1d,density_1d,color='orange',linestyle='--',label='1D const.')
# plt.plot(list_number_nodes_2d,density_2d,'b--',label='2D const.')
# ax4.plot(list_number_nodes_3d,density_3d,'r',label='3D')
# ax4.set_title("Density plot", fontdict={"size": 15})
# ax4.set_ylabel("Density", fontdict={"size": 12})
# ax4.set_xlabel("Number of Nodes", fontdict={"size": 12})
# plt.legend()
plt.savefig('density all .png',dpi=300)
# plt.savefig('density all 1.8.svg')
#%% value vs N
plt.clf()
plt.figure(figsize=(6,5))
fig1, (ax4) = plt.subplots(1)
ax4.plot(list_number_nodes_1d,value1,'orange',label='1D')
ax4.plot(list_number_nodes_2d,value2,'b',label='2D')
ax4.plot(list_number_nodes_3d,value3,'r',label='3D')
ax4.set_title("max dist over N", fontdict={"size": 15})
ax4.set_ylabel("max dist criterion", fontdict={"size": 12})
ax4.set_xlabel("Number of Nodes", fontdict={"size": 12})
ax4.legend()
# plt.savefig('value to node ratio.png',dpi=300)
# plt.savefig('value to node ratio.svg')
#%% degree histogram
plt.clf()
plt.figure(figsize=(6,5))
i=4# ändere die zahl um die node anzahl zu verändern
plt.bar(*np.unique(list_degree_sequence3[i], return_counts=True),color='r'          ,label='3D max dist. =%.2f'%(value3[i]) )#max dist. =%.2f'%(value3[i])
plt.bar(*np.unique(list_degree_sequence2[i], return_counts=True),color='mediumblue' ,label='2D max dist. =%.2f'%(value2[i]),alpha=0.7,width=0.7)#max dist. =%.2f'%(value2[i]) 
plt.bar(*np.unique(list_degree_sequence1[i], return_counts=True),color='orange'     ,label='1D max dist. =%.2f'%(value1[i]),alpha =0.6,width=0.6) # max dist. =%.2f'%(value1[i])
plt.title("Degree histogram %.0f nodes"%list_number_nodes_3d[i],fontdict={"size": 15})
plt.xlabel("Degree",fontdict={"size": 13})
plt.ylabel("# of Nodes",fontdict={"size": 13})
plt.legend()
plt.yscale('log')
# plt.savefig('random scale value ana degree_hist_%.0f Nodes value= %.1f.svg'%((list_number_nodes_3d[i]),value3[i]))
# plt.savefig('random scale value ana degree_hist_%.0f Nodes value= %.1f.png'%((list_number_nodes_3d[i]),value3[i]),dpi=300)
#  
#%% clust histogram mit bar plot
plt.clf()
plt.figure(figsize=(6,5))
i=0# ändere die zahl um die node anzahl zu verändern
plt.bar(*np.unique(np.round(list_clustering_seq3[i],decimals=2), return_counts=True),color='red'        ,width=0.015,label='3D max dist. = %.2f'%value3[i])
# plt.bar(*np.unique(np.round(list_clustering_seq2[i],decimals=2), return_counts=True),color='mediumblue' ,width=0.01,alpha=0.7,label='2D max dist. = %.2f'%value2[i]) 
# plt.bar(*np.unique(np.round(list_clustering_seq1[i],decimals=2), return_counts=True),color='orange'     ,width=0.01,alpha=0.7,label='1D max dist. = %.2f'%value1[i]) 
# plt.title("Clust histogram %.0f Nodes "%len(list_clustering_seq2[i]),fontdict={"size": 15})
plt.xlabel("Clustering Coefficient",fontdict={"size": 13})
plt.ylabel("# of Nodes",fontdict={"size": 13})
plt.legend()
plt.savefig('random scale value ana clust_hist %.0f  and %.2f .svg'%(list_number_nodes_3d[i],value3[i]))
# plt.savefig('random scale N ana clust_hist %.0f  and %.2f .png'%(list_number_nodes_3d[i],value3[i]),dpi=300)

#%% SHORTEST PATH Plot the frequency distribution (ignoring path lengths of 0) as a percentage
plt.clf()
i=4#
fig, ax = plt.subplots(figsize=(5, 4))
ax.bar(np.arange(1, diameter3[i] + 1), height=freq_percent3[i], color='red' ,label='3D max dist. =%.2f'%value3[i] ,width=0.8)
ax.bar(np.arange(1, diameter2[i] + 1), height=freq_percent2[i], color='mediumblue',label='2D max dist. =%.2f'%value2[i],width=0.8,alpha=0.8)
ax.bar(np.arange(1, diameter1[i] + 1), height=freq_percent1[i], color='orange'    ,label='1D max dist. =%.2f'%value1[i] ,width=0.5,alpha=0.6)
# ax.set_title("Distribution with %.0f nodes"%list_number_nodes_3d[i], fontdict={"size": 15}, loc="center")
ax.set_xlabel("Shortest Path Length", fontdict={"size": 12})
ax.set_ylabel("Frequency (%)"       , fontdict={"size": 12})
# ax.set_xlim(0,8)
# plt.yscale('log')
ax.legend()
# plt.savefig('discr scale shortest path hist 3D %.2f nodes %.1f .svg'%(list_number_nodes_3d[i] ,value3[i]))
# plt.savefig('disct scale shortest path hist 3D %.2f nodes %.1f .png'%(list_number_nodes_3d[i] ,value3[i]),dpi=300)
#%% av density
plt.clf()
i=0
plt.figure(figsize=(6,5))
plt.plot(list_number_nodes_3d,density_3d,'r',label='3D')
plt.plot(list_number_nodes_2d,density_2d,'b',label='2D')
plt.plot(list_number_nodes_1d,density_1d,'orange',label='1D')
plt.title('Density of the graph', fontdict={"size": 12})
plt.ylabel("Density"            , fontdict={"size": 12})
plt.xlabel("# of Nodes"         , fontdict={"size": 12})
plt.legend()
plt.savefig('density plot value=%.1f.svg'%value1[i])
#%% av path len
plt.figure(figsize=(6,5))
plt.plot(list_number_nodes_1d     ,av_degree1     ,color='orange'     ,linestyle='-',label='1D')
plt.plot(list_number_nodes_2d     ,av_degree2     ,color='mediumblue' ,linestyle='-',label='2D')
plt.plot(list_number_nodes_3d     ,av_degree3     ,color='red'        ,linestyle='-',label='3D')
plt.legend()
plt.ylabel('average Degree' , fontdict={"size": 12})
plt.xlabel('Number of nodes'     , fontdict={"size": 12})
plt.title('average degree', fontdict={"size": 15})
plt.savefig('scale av degree value=%.1f .svg'%(value1[0]))
#%% av path len
plt.clf()
plt.figure(figsize=(6,5))
plt.plot(list_number_nodes_1d     ,av_path1d_list     ,color='orange'     ,linestyle='-',label='1D')
plt.plot(list_number_nodes_2d     ,av_path2d_list     ,color='mediumblue' ,linestyle='-',label='2D')
plt.plot(list_number_nodes_3d     ,av_path3d_list     ,color='red'        ,linestyle='-',label='3D')
plt.legend()
plt.ylabel('average path length' , fontdict={"size": 12})
plt.xlabel('Number of nodes'     , fontdict={"size": 12})
plt.title('average shortest path', fontdict={"size": 15})
plt.savefig('scale av path_length value=%.1f .svg'%(value1[0]))
#%% av clust
plt.clf()
plt.plot(list_number_nodes_3d,av_clust3,'r',label='3D')
plt.plot(list_number_nodes_2d,av_clust2,'b',label='2D')
plt.plot(list_number_nodes_1d,av_clust1,'orange',label='1D')
plt.title('Average clustering', fontdict={"size": 15})
plt.ylabel("Clustering coeff" , fontdict={"size": 12})
plt.xlabel("Number of Nodes"       , fontdict={"size": 12})
plt.legend()
# plt.savefig('scale Av_clusteringvalue=%.1f.svg'%value1[0])
#%% abstände von center point histogram
plt.clf()
plt.bar(*np.unique(np.round(bedingung3,decimals=1), return_counts=True),color='red',width=0.12,label='3D')#max dist. = %.2f'%value3[i]
plt.bar(*np.unique(np.round(bedingung2,decimals=1), return_counts=True),color='mediumblue',width=0.1,label='2D',alpha=0.8)#max dist. = %.2f'%value3[i]
plt.bar(*np.unique(np.round(bedingung1,decimals=1), return_counts=True),color='orange',width=0.08,label='1D',alpha=0.6)#max dist. = %.2f'%value3[i]

plt.xlabel('dist from center[]')
plt.ylabel('count [#]')
plt.legend()
plt.title('Euclidean distances')
#%%
plt.clf()
plt.figure(figsize=(6,5))
plt.plot(list_number_nodes_1d,abstände1,'orange')
plt.plot(list_number_nodes_2d,abstände2,'b')
plt.plot(list_number_nodes_3d,np.ones(len(list_number_nodes_3d)),'r')
plt.yscale('log')
plt.xlim(0,1100)
plt.xlabel('Number of nodes', fontdict={"size": 12})
plt.ylabel('Node distances', fontdict={"size": 12})
plt.savefig('distance shrinking.png',dpi=200)
#%%
plt.clf()
N = np.arange(0.1,999,10)
R3d = 3/(np.cbrt(N)/2)
R2d = 2/(np.sqrt(0.5*N)/2)
R2d_scale = 2/(np.cbrt(N)/2)
plt.plot(N,R2d, 'b-',label='2D Eq. (XII)')
plt.plot(N,R3d, 'r-',label='3D Eq. (XI)')
plt.plot(N,R2d_scale, 'b--',label='2D Eq. (XIII)')
plt.ylabel('Ratio skin/volume')
plt.xlabel('Number of nodes')
plt.legend()
plt.ylim(-0.01,4.01)
plt.savefig('ratios skin volume.png',dpi=250)
#%% percent removed by corners
plt.clf()
plt.plot(list_number_nodes_2d,((total_nodes_2d-list_number_nodes_2d)/total_nodes_2d)*100,'b-',label='2D')
plt.plot(list_number_nodes_3d,((total_nodes_3d-list_number_nodes_3d)/total_nodes_3d)*100,'r-',label='3D')
plt.ylabel('Percentage of nodes removed (%)')
plt.xlabel('Number of nodes')
plt.legend()
# plt.savefig('prozent nodes cuttoff.png',dpi=250)
#%%
plt.clf()

plt.figure(figsize=(7,6))
plt.plot(list_number_nodes_1d,(skin_list1d/list_number_nodes_1d)*100,color='orange',linestyle='-',label='1D const. node distance')
plt.plot(list_number_nodes_2d,(skin_list2d/list_number_nodes_2d)*100,'b-',label='2D const. node distance')
#%%
plt.plot(list_number_nodes_1d,(skin_list1d/list_number_nodes_1d)*100,color='orange',linestyle='--',label='1D const. graph scale')
plt.plot(list_number_nodes_2d,(skin_list2d/list_number_nodes_2d)*100,'b--',label='2D const. graph scale')

#%%
# plt.figure(figsize=(16,15))
plt.plot(list_number_nodes_3d,(skin_list3d/list_number_nodes_3d)*100,'r-',label='3D constant')
plt.plot(list_number_nodes_1d,(skin_list1d/list_number_nodes_1d)*100,color='orange',linestyle='-.',label='1D const. edges/nodes')
plt.plot(list_number_nodes_2d,(skin_list2d/list_number_nodes_2d)*100,'b-.',label='2D const. edges/nodes')
plt.xlabel('Number of nodes', fontdict={"size": 15})
plt.ylabel('Percentage of nodes in skin (%)', fontdict={"size": 15})
plt.legend()
plt.xlim(0,1100)
plt.savefig('fraction skin.png',dpi=250)
#%%
from scipy.optimize import curve_fit
def func(x, a, b, c):
    return a* np.exp(-b * x) + c
plt.clf()
# popt, pcov = curve_fit(func,list_number_nodes_2d,abstände , bounds=(0, [3., 3., 3]))
plt.plot(list_number_nodes_2d,abstände2)
plt.plot(list_number_nodes_1d,abstände1)
# plt.plot(list_number_nodes_2d,func(list_number_nodes_2d,*popt))

#%%
plt.clf()
plt.figure(figsize=(6,5))
plt.plot(list_number_nodes_1d,(np.array(value1)/np.array(abstände1)),'orange',label='1D')
plt.plot(list_number_nodes_2d,(np.array(value2)/np.array(abstände2)),'b',label='2D')
plt.plot(list_number_nodes_3d,(np.array(value3)/np.ones(len(value3))),'r',label='3D')
plt.xlabel('Number of nodes', fontdict={"size": 13})
plt.ylabel('edge criterion/ node distance', fontdict={"size": 13})
plt.xlim(0,1050)
plt.legend()
plt.savefig('edge dist node dist.png',dpi=250)
#%% dist histo
plt.clf()
i=5
distan=np.concatenate((distances2), axis=None)
plt.bar(*np.unique(np.round(distan,decimals=0), return_counts=True),color='grey',width=0.1,label='unknown geometry' )#max dist. = %.2f'%value3[i]
plt.bar(value2[i]+0.1,20,color='r',width=0.1,label='edge distance threshold')
plt.xlabel('Distance ()')
plt.ylabel('# count')
plt.legend()
